name: Build

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up GraalVM
      uses: ayltai/setup-graalvm@v1
      with:
        java-version: 11
        graalvm-version: 20.3.0
        native-image: true
    - name: Build
      env:
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      run: mvn clean verify -Pfailsafe
    - name: 'Upload Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: target-linux
        path: ./target
        retention-days: 5

  build-windows:
    name: Windows Build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up GraalVM
      uses: ayltai/setup-graalvm@v1
      with:
        java-version: 11
        graalvm-version: 20.3.0
        native-image: true
    - name: Install VS tools
      run: choco install visualstudio2017-workload-vctools
    - name: Build
      env:
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      run: ./build-windows.bat
    - name: 'Upload Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: target-windows
        path: ./target
        retention-days: 5

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    # needs: 
    #   - build-windows
    #   - build-linux
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      # - uses: actions/download-artifact@v2
      # - name: Package
      #   run: |
      #     (cd ./target-linux && zip ../teamscale-upload-linux.zip ./teamscale-upload)
      #     (cd ./target-windows && zip ../teamscale-upload-windows.zip ./teamscale-upload.exe)
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
      - name: Get the version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ${{ steps.create_release.outputs.upload_url }}
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./teamscale-upload-windows.zip
          asset_name: teamscale-upload-windows.zip
          asset_content_type: application/zip
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./teamscale-upload-linux.zip
          asset_name: teamscale-upload-linux.zip
          asset_content_type: application/zip
